Script for video:

For the computer architecture project part 3, I implemented quicksort. I used an open-source Java implementation of quicksort
as a framework for the ARM code. This was a bit more difficult to implement than in Java, as every little calculation requires
a line of code. The loops were challenging as well, as every loop required breaking to a new section in the ARM code. Since 
quicksort does sometimes have the potential to end and not be 100% correct, I implemented some redundancy functions as well. 
Though the quicksort algorithm took a few more lines to implement than in Java, it did not quite satisfy the 90 line requirement,
so I figured the redundancy measures would be a nice solution to this issue. In order to fully make sure that the array is sorted,
I make sure that the program runs quicksort twice and then goes through an elementary sorting process to clean any sort of other
issues up. Though this is not necessary in most cases and hurts the total time complexity of part three, it does ensure that part
three returns the correct result. Finally, I have the C program set up with a few assert statements to ensure that the program 
sorts the array correctly.

With the use of ARM it is difficult to run two algorithms such as these in an efficient manner to compare their performance with the use of time. In java or C, we could implement a timer of sort; but in ARM, this is not as easily done.

As you will notice throughout the running of the program, and the duration of the video, the values stored in the registers found in the “register” tab in the upper right corner, are being constantly changed and reordered using the quicksort algorithm, along with the insertion sort algorithm as a redundancy measure to ensure that the array is sorted correctly. The values being displayed are in hexadecimal, but are equivalent to the integer values being entered.

While it’s hard to follow the lines of code directly as it is running, you can see in the “target console” tab in the bottom right corner at the end of the program that the outputs are consistent with what is found in the registers. 

In this case, we wanted to find what value is found at position 4 in the first entered array after sorting, this array being of length 20; and the second output is what value is found at position 2 in the second inputted array after sorting, which is of length 7.

After letting the program run through its iterations, we will receive these positional values as outputs, confirming that the arrays were correctly sorted after comparing them to the values found in the registers

The results displayed are:
the value 29 is located at position 14 in the array, this result is from running part 2 of the project, which expects to find what position the value 29 is at using binary search
The 4th position in the array contains the value 3
And the 2nd position in the second
